---
title: "R Project"
subtitle: "Tools For Data Science"
author: "Nicholas Lopez"
format: html
self-contained: true
execute:
  warning: FALSE
  message: FALSE
---

## **Instructions**

In this project you will be working with R base and Tidyverse.

1.  ***Render*** the empty file to make sure everything is working
2.  Consistently *Render* the file each time you answer a question

⚠️ Students enrolled in CAP4755 should only solve: **1, 2, 3, 4, 6, 7, 8, and 9.**

## R Base (40%)

1.  Compute the difference between the current year and the year you started coding divide this by the difference between the current year and the year you were born. Multiply this with 100 to get the percentage of your life you have been programming.

```{r}
#Code here
current_year <- as.integer(format(Sys.Date(), "%Y")) # Get current year in YYYY format
year_start_coding <- 2018 
year_born <- 1993
years_coding <- current_year - year_start_coding
age <- current_year - year_born

year_coding_pct <- years_coding / age * 100

answer <- paste("I have been programming ", 
                as.character(round(year_coding_pct, 0)),
                "% of my life.", 
                sep = "")
answer
```

2.  Compute the mean of the square root of a vector of 100 random numbers.

```{r}
#Code here
# generate 100 random numbers
r_nums <- abs(rnorm(100))

# find the sqrt
sqrt_r_nums = sqrt(r_nums)

# find the mean
m_sqrt_r_nums = mean(sqrt_r_nums)
m_sqrt_r_nums
```

3.  Make a vector from 1 to 100. Make a `for-loop` which runs through the whole vector. Multiply the elements which are smaller than 20 or larger than 80 by 10 and the other elements by 0.1.

```{r}
#Code here
vec <- 1:100

for (i in 1:length(vec)){
  if (vec[i] < 20 || vec[i] > 80) {
    vec[i] = vec[i] * 10
  } else {
    vec[i] = vec[i] * 0.1
  }
}

vec
```

4.  Write a *`function`* to combine questions 2 and 3, so that you can feed it an integer `n` you like (as argument). The function 1) generates `n` random number, 2) multiplies the elements which are smaller than 20 or larger than 80 by 10 and the other elements by 0.1, then 3) returns the mean of the square root of the vector.

```{r}
#Code here
my_function = function(n) {
  # Create vector of random numbers 
  rVec = 1:n
  
  # multiple numbers by 10 if <20 or >80 otherwise 0.1
  for (i in 1:length(rVec)){
    if (rVec[i] < 20 || rVec[i] > 80){
      rVec[i] <- rVec[i] * 10
    } else {
      rVec[i] <- rVec[i] * 0.1
    }
  }
  print(rVec)
  
  # Mean sqrt of the vector
  mean(sqrt(rVec))
}

my_function(100)
```

## R Tidyverse (60%)

### Baby names distribution data

We will look into the distribution of baby names. Use Tidyverse to answer the questions. This data set has over 2 millions rows from 1880 to 2022 It was provided by the Social Security Administration. It has the following variables:

-   year: birth year
-   sex: Female or Male
-   name: baby name
-   counts: number of babies named "name" in that year with that sex

#### Data Wrangling

Read the data in R and called it **`bbnames`**:

```{r}
# load packages
library(data.table)
library(tidyverse)

# Load the data - take a minute to load :)
bbnames = fread("https://pages.uwf.edu/acohen/teaching/datasets/babynames.csv", drop = "V1")
bbnames

# Code here
```

5.  Find the number of babies (names) born in the same year. (hints: use `group_by` and `summarise`). Then, find which year had the highest number of babies:

```{r}
#Code here
yearMostBabies <- bbnames %>%
  group_by(year) %>%
  summarise(babies = sum(counts)) %>%
  arrange(desc(babies)) %>%
  slice(1) %>%
  pull(year)
  
paste(yearMostBabies, "had the most babies.")
```

6.  Find the most popular, all time, name for each sex (hints: answer for females starts with **M** and males with **J**):

```{r}
#Code here
get_most_pop_name <- function(gender) {
  bbnames %>%
    group_by(sex, name) %>%
    summarise(NameCounts = sum(counts)) %>%
    arrange(desc(NameCounts)) %>%
    filter(sex == gender) %>%
    slice(1) %>%
    pull(name)
}

mPopularFemale <- get_most_pop_name("F")
paste("Most popular female name:", mPopularFemale)

mPopularMale <- get_most_pop_name("M")
paste("Most popular male name:", mPopularMale)
```

7.  Create a new data frame while creating a new variable `age` and filter by `age` - Pick a threshold that would keep only people who may still alive (you may use the age expectancy):

```{r}
#Code here
# Set age expectancy. ref: https://stacks.cdc.gov/view/cdc/151563
age_exp = 77.5

alive_bbnames <- bbnames %>%
  mutate(age = current_year - year) %>% # current year was establish in #1
  filter(age < age_exp)

alive_bbnames

```

#### Visualization

8.  Use ggplot to plot the distribution of the name *John, x-axis is `year`* and y-axis is `counts`. Use `geom_bar()`, `geom_line()`, and `facet_wrap()` to separate females and males (use `scale="free"` to free the scales) .

```{r}
#Code here
plot_name <- function(n) {
  plot1 <- bbnames %>%
    filter(name == n) %>%
    ggplot(aes(x = year, y = counts)) +
    geom_bar(inherit.aes = TRUE, 
             stat = "identity", 
             fill = "blue", 
             alpha = 0.5) +
    geom_line(inherit.aes = TRUE,
              fill = "white") +
    facet_wrap(~ sex, scale = "free") +
    labs(title = "Babies Named...", 
         subtitle = n,
         ) +
    xlab("Year") +
    ylab("Number of Babies") +
    theme_classic()
  
  plot1
}
plot_name("John")
```

9.  Use ggplot to plot the distribution of the name of your choice, *x-axis is `year`* and y-axis is `counts`. Use `geom_bar()`, `geom_line()`, and `facet_wrap()` to separate females and males (use `scale="free"` to free the scales) .

```{r}
#Code here
# Use plot_name() created in #8
plot_name("Oliver")
```

### Pilots certification data

Data was obtained from the Federation Aviation Administration (FAA) in June 2023 on pilot certification. The data has over 450000 pilots records and contained the following:

-   ID: pilot ID
-   STATE: US state where the pilot lives
-   CertLevel: the certification level (Airline, Commercial, Student, Sport, Private, and Recreational),
-   MedClass: the medical class,
-   MedExpMonth: the medical expire month, and
-   MedExpYear: the medical expire year.

Read the data in R and called it **`pilots`**:

```{r}
# Code here

# load packages
library(data.table)
library(tidyverse)

# Load the data 
pilots = fread("https://pages.uwf.edu/acohen/teaching/datasets/pilotscertification.csv")
pilots
```

10. Find how many pilots per certification level will have their medical certification expires the current year and month

```{r}
# Code here
MedExp_by_CertLevel <- pilots %>%
  filter(MedExpYear == current_year, # current year was establish in #1
         MedExpMonth == as.integer(format(Sys.Date(), "%m"))) %>% # Get current month
  group_by(CertLevel, MedExpYear, MedExpMonth) %>%
  summarise(MedExpCount = n()) %>%
  arrange(desc(MedExpCount))

MedExp_by_CertLevel
```
